name: Build System Images

on:
  push:
    branches: [ main ]
    tags: [ '*.*.*' ]

jobs:
#   setup-runner:
#     strategy:
#       fail-fast: false
#       matrix:
#         system: [pi0, pi4]

#     runs-on: ubuntu-latest

#     steps:
#       - id: make-droplet
#         env:
#           DIGITALOCEAN_TOKEN: ${{ secrets.DO_PAT }}
#         run: |
#           export IMAGE_ID=$(curl -X GET \
#           -H 'Content-Type: application/json' \
#           -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
#           "https://api.digitalocean.com/v2/snapshots" | jq '.snapshots[] | select(.name=="${{ matrix.system }}-github-action") | .id')
          
#           echo $IMAGE_ID
          
#           curl -X POST \
#           -H 'Content-Type: application/json' \
#           -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
#           -d "{\"name\":\"${{ matrix.system }}\",\"region\":\"nyc1\",\"size\":\"c-4\",\"image\":$IMAGE_ID}" \
#           "https://api.digitalocean.com/v2/droplets"

  build-system-image:
    strategy:
      fail-fast: false
      matrix:
        system: [pi0, pi4]

    runs-on: [self-hosted, "${{ matrix.system }}"]
#     needs: setup-runner
    timeout-minutes: 2880
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Cache Buildroot compile cache + dls
        uses: actions/cache@v2
        with:
          path: ~/br-cache
          key: ${{ runner.os }}-buildroot-${{ matrix.system }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildroot-${{ matrix.system }}-

      - name: Set arch var
        id: vars
        run: |
          echo ::set-output name=arch::\
          $(echo '{ "pi0": "pi/0", "pi3": "pi/3", "pi4": "pi4x64" }' | jq -r 'to_entries[] | select(.key=="${{ matrix.system }}") | .value')

      - name: Build ${{ matrix.system }} Image
        run: |
          export SKIFF_CONFIG=${{ steps.vars.outputs.arch }},apps/satellite
          export TERM=xterm
          export BR2_CCACHE_DIR=${HOME}/br-cache/ccache
          export BR2_DL_DIR=${HOME}/br-cache/dl
          make configure && make compile

      - name: Make SD Image
        run: sudo TERM=xterm PI_IMAGE=/tmp/rhasspy-satellite-${{ matrix.system }}.img make cmd/apps/satellite/buildimage

      - name: Gzip the SD Image
        run: pigz -9 -f -k /tmp/rhasspy-satellite-${{ matrix.system }}.img

      - name: Upload!
        uses: actions/upload-artifact@v2
        with:
          name: rhasspy-satellite-${{ matrix.system }}.img
          path: /tmp/rhasspy-satellite-${{ matrix.system }}.img.gz
          
  teardown-runner:
    strategy:
      fail-fast: false
      matrix:
        system: [pi0, pi4]
    
    runs-on: ubuntu-latest
#     needs: [setup-runner, build-system-image]
    needs: [build-system-image]
    #if: always() # shutdown the droplets even on failure
    env:
      DIGITALOCEAN_TOKEN: ${{ secrets.DO_PAT }}
    steps:
      - name: Get Droplet ID
        id: dropletid
        run: |
          export IMAGE_ID=$(curl -X GET \
          -H 'Content-Type: application/json' \
          -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
          "https://api.digitalocean.com/v2/droplets" | jq '.droplets[] | select(.name=="${{ matrix.system }}") | .id')
          
          echo "::set-output name=droplet_id::$IMAGE_ID"
    
      - name: Shutdown Droplet
        run: |
          curl -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
          -d '{"type":"shutdown"}' \
          "https://api.digitalocean.com/v2/droplets/${{ steps.dropletid.outputs.droplet_id }}/actions"
          
      - name: wait 1m for shutdown
        run: sleep 60
          
      - name: Poweroff Droplet
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
            -d '{"type":"power_off"}' \
            "https://api.digitalocean.com/v2/droplets/${{ steps.dropletid.outputs.droplet_id }}/actions"

      - name: wait 20s for power_off
        run: sleep 20

      - name: Delete Droplet
        run: |
          curl -X DELETE \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
          "https://api.digitalocean.com/v2/droplets/${{ steps.dropletid.outputs.droplet_id }}"
